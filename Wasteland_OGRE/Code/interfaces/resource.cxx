#include "StdAfx.h"
// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "resource.hxx"

// location_t
// 

const location_t::Type_type& location_t::
Type () const
{
  return this->Type_.get ();
}

location_t::Type_type& location_t::
Type ()
{
  return this->Type_.get ();
}

void location_t::
Type (const Type_type& x)
{
  this->Type_.set (x);
}

void location_t::
Type (::std::auto_ptr< Type_type > x)
{
  this->Type_.set (x);
}

const location_t::FileName_type& location_t::
FileName () const
{
  return this->FileName_.get ();
}

location_t::FileName_type& location_t::
FileName ()
{
  return this->FileName_.get ();
}

void location_t::
FileName (const FileName_type& x)
{
  this->FileName_.set (x);
}

void location_t::
FileName (::std::auto_ptr< FileName_type > x)
{
  this->FileName_.set (x);
}

const location_t::Recursive_type& location_t::
Recursive () const
{
  return this->Recursive_.get ();
}

location_t::Recursive_type& location_t::
Recursive ()
{
  return this->Recursive_.get ();
}

void location_t::
Recursive (const Recursive_type& x)
{
  this->Recursive_.set (x);
}


// resource_t
// 

const resource_t::GroupName_type& resource_t::
GroupName () const
{
  return this->GroupName_.get ();
}

resource_t::GroupName_type& resource_t::
GroupName ()
{
  return this->GroupName_.get ();
}

void resource_t::
GroupName (const GroupName_type& x)
{
  this->GroupName_.set (x);
}

void resource_t::
GroupName (::std::auto_ptr< GroupName_type > x)
{
  this->GroupName_.set (x);
}

const resource_t::location_sequence& resource_t::
location () const
{
  return this->location_;
}

resource_t::location_sequence& resource_t::
location ()
{
  return this->location_;
}

void resource_t::
location (const location_sequence& s)
{
  this->location_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// location_t
//

location_t::
location_t (const Type_type& Type,
            const FileName_type& FileName,
            const Recursive_type& Recursive)
: ::xml_schema::type (),
  Type_ (Type, ::xml_schema::flags (), this),
  FileName_ (FileName, ::xml_schema::flags (), this),
  Recursive_ (Recursive, ::xml_schema::flags (), this)
{
}

location_t::
location_t (const location_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Type_ (x.Type_, f, this),
  FileName_ (x.FileName_, f, this),
  Recursive_ (x.Recursive_, f, this)
{
}

location_t::
location_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Type_ (f, this),
  FileName_ (f, this),
  Recursive_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void location_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Type
    //
    if (n.name () == "Type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Type_type > r (
        Type_traits::create (i, f, this));

      if (!Type_.present ())
      {
        this->Type_.set (r);
        continue;
      }
    }

    // FileName
    //
    if (n.name () == "FileName" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< FileName_type > r (
        FileName_traits::create (i, f, this));

      if (!FileName_.present ())
      {
        this->FileName_.set (r);
        continue;
      }
    }

    // Recursive
    //
    if (n.name () == "Recursive" && n.namespace_ ().empty ())
    {
      if (!Recursive_.present ())
      {
        this->Recursive_.set (Recursive_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!Type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Type",
      "");
  }

  if (!FileName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "FileName",
      "");
  }

  if (!Recursive_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Recursive",
      "");
  }
}

location_t* location_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class location_t (*this, f, c);
}

location_t::
~location_t ()
{
}

// resource_t
//

resource_t::
resource_t (const GroupName_type& GroupName)
: ::xml_schema::type (),
  GroupName_ (GroupName, ::xml_schema::flags (), this),
  location_ (::xml_schema::flags (), this)
{
}

resource_t::
resource_t (const resource_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  GroupName_ (x.GroupName_, f, this),
  location_ (x.location_, f, this)
{
}

resource_t::
resource_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  GroupName_ (f, this),
  location_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void resource_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // GroupName
    //
    if (n.name () == "GroupName" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< GroupName_type > r (
        GroupName_traits::create (i, f, this));

      if (!GroupName_.present ())
      {
        this->GroupName_.set (r);
        continue;
      }
    }

    // location
    //
    if (n.name () == "location" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< location_type > r (
        location_traits::create (i, f, this));

      this->location_.push_back (r);
      continue;
    }

    break;
  }

  if (!GroupName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "GroupName",
      "");
  }
}

resource_t* resource_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class resource_t (*this, f, c);
}

resource_t::
~resource_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::resource_t >
resource (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::resource (isrc, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::resource (isrc, h, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::resource (isrc, h, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::resource (isrc, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::resource (isrc, h, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::resource (isrc, h, f, p);
}

::std::auto_ptr< ::resource_t >
resource (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::resource_t > r (
    ::resource (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::resource_t >
resource (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::resource_t > r (
      ::resource (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "resource" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::resource_t > r (
      ::xsd::cxx::tree::traits< ::resource_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "resource",
    "");
}

::std::auto_ptr< ::resource_t >
resource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "resource" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::resource_t > r (
      ::xsd::cxx::tree::traits< ::resource_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "resource",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


#include "StdAfx.h"
// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef E__OGRE_BUILD_BIN_DEBUG_RESOURCE_XML_SCHEMAS_CONFIGURATION_HXX
#define E__OGRE_BUILD_BIN_DEBUG_RESOURCE_XML_SCHEMAS_CONFIGURATION_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class action_t;
class movement_t;
class volume_t;
class configuration_t;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class action_t: public ::xml_schema::type
{
  public:
  // reload
  // 
  typedef ::xml_schema::string reload_type;
  typedef ::xsd::cxx::tree::traits< reload_type, char > reload_traits;

  const reload_type&
  reload () const;

  reload_type&
  reload ();

  void
  reload (const reload_type& x);

  void
  reload (::std::auto_ptr< reload_type > p);

  // envwarnsys
  // 
  typedef ::xml_schema::string envwarnsys_type;
  typedef ::xsd::cxx::tree::traits< envwarnsys_type, char > envwarnsys_traits;

  const envwarnsys_type&
  envwarnsys () const;

  envwarnsys_type&
  envwarnsys ();

  void
  envwarnsys (const envwarnsys_type& x);

  void
  envwarnsys (::std::auto_ptr< envwarnsys_type > p);

  // use
  // 
  typedef ::xml_schema::string use_type;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_type&
  use () const;

  use_type&
  use ();

  void
  use (const use_type& x);

  void
  use (::std::auto_ptr< use_type > p);

  // Constructors.
  //
  action_t (const reload_type&,
            const envwarnsys_type&,
            const use_type&);

  action_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  action_t (const action_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual action_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~action_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< reload_type > reload_;
  ::xsd::cxx::tree::one< envwarnsys_type > envwarnsys_;
  ::xsd::cxx::tree::one< use_type > use_;
};

class movement_t: public ::xml_schema::type
{
  public:
  // forward
  // 
  typedef ::xml_schema::string forward_type;
  typedef ::xsd::cxx::tree::traits< forward_type, char > forward_traits;

  const forward_type&
  forward () const;

  forward_type&
  forward ();

  void
  forward (const forward_type& x);

  void
  forward (::std::auto_ptr< forward_type > p);

  // backward
  // 
  typedef ::xml_schema::string backward_type;
  typedef ::xsd::cxx::tree::traits< backward_type, char > backward_traits;

  const backward_type&
  backward () const;

  backward_type&
  backward ();

  void
  backward (const backward_type& x);

  void
  backward (::std::auto_ptr< backward_type > p);

  // right
  // 
  typedef ::xml_schema::string right_type;
  typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

  const right_type&
  right () const;

  right_type&
  right ();

  void
  right (const right_type& x);

  void
  right (::std::auto_ptr< right_type > p);

  // left
  // 
  typedef ::xml_schema::string left_type;
  typedef ::xsd::cxx::tree::traits< left_type, char > left_traits;

  const left_type&
  left () const;

  left_type&
  left ();

  void
  left (const left_type& x);

  void
  left (::std::auto_ptr< left_type > p);

  // sprint
  // 
  typedef ::xml_schema::string sprint_type;
  typedef ::xsd::cxx::tree::traits< sprint_type, char > sprint_traits;

  const sprint_type&
  sprint () const;

  sprint_type&
  sprint ();

  void
  sprint (const sprint_type& x);

  void
  sprint (::std::auto_ptr< sprint_type > p);

  // jump
  // 
  typedef ::xml_schema::string jump_type;
  typedef ::xsd::cxx::tree::traits< jump_type, char > jump_traits;

  const jump_type&
  jump () const;

  jump_type&
  jump ();

  void
  jump (const jump_type& x);

  void
  jump (::std::auto_ptr< jump_type > p);

  // Constructors.
  //
  movement_t (const forward_type&,
              const backward_type&,
              const right_type&,
              const left_type&,
              const sprint_type&,
              const jump_type&);

  movement_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  movement_t (const movement_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual movement_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~movement_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< forward_type > forward_;
  ::xsd::cxx::tree::one< backward_type > backward_;
  ::xsd::cxx::tree::one< right_type > right_;
  ::xsd::cxx::tree::one< left_type > left_;
  ::xsd::cxx::tree::one< sprint_type > sprint_;
  ::xsd::cxx::tree::one< jump_type > jump_;
};

class volume_t: public ::xml_schema::type
{
  public:
  // character
  // 
  typedef ::xml_schema::integer character_type;
  typedef ::xsd::cxx::tree::traits< character_type, char > character_traits;

  const character_type&
  character () const;

  character_type&
  character ();

  void
  character (const character_type& x);

  // music
  // 
  typedef ::xml_schema::integer music_type;
  typedef ::xsd::cxx::tree::traits< music_type, char > music_traits;

  const music_type&
  music () const;

  music_type&
  music ();

  void
  music (const music_type& x);

  // soundfx
  // 
  typedef ::xml_schema::integer soundfx_type;
  typedef ::xsd::cxx::tree::traits< soundfx_type, char > soundfx_traits;

  const soundfx_type&
  soundfx () const;

  soundfx_type&
  soundfx ();

  void
  soundfx (const soundfx_type& x);

  // Constructors.
  //
  volume_t (const character_type&,
            const music_type&,
            const soundfx_type&);

  volume_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  volume_t (const volume_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual volume_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~volume_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< character_type > character_;
  ::xsd::cxx::tree::one< music_type > music_;
  ::xsd::cxx::tree::one< soundfx_type > soundfx_;
};

class configuration_t: public ::xml_schema::type
{
  public:
  // action
  // 
  typedef ::action_t action_type;
  typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

  const action_type&
  action () const;

  action_type&
  action ();

  void
  action (const action_type& x);

  void
  action (::std::auto_ptr< action_type > p);

  // movement
  // 
  typedef ::movement_t movement_type;
  typedef ::xsd::cxx::tree::traits< movement_type, char > movement_traits;

  const movement_type&
  movement () const;

  movement_type&
  movement ();

  void
  movement (const movement_type& x);

  void
  movement (::std::auto_ptr< movement_type > p);

  // volume
  // 
  typedef ::volume_t volume_type;
  typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

  const volume_type&
  volume () const;

  volume_type&
  volume ();

  void
  volume (const volume_type& x);

  void
  volume (::std::auto_ptr< volume_type > p);

  // Constructors.
  //
  configuration_t (const action_type&,
                   const movement_type&,
                   const volume_type&);

  configuration_t (::std::auto_ptr< action_type >&,
                   ::std::auto_ptr< movement_type >&,
                   ::std::auto_ptr< volume_type >&);

  configuration_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  configuration_t (const configuration_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual configuration_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~configuration_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< action_type > action_;
  ::xsd::cxx::tree::one< movement_type > movement_;
  ::xsd::cxx::tree::one< volume_type > volume_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::configuration_t >
configuration (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::configuration_t >
configuration (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::configuration_t >
configuration (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::configuration_t >
configuration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // E__OGRE_BUILD_BIN_DEBUG_RESOURCE_XML_SCHEMAS_CONFIGURATION_HXX
